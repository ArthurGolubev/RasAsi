 # TODO –°–¥–µ–ª–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (–ø—Ä–∏—Å—ã–ª–∞—Ç—å)
 # TODO —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –û–ë–©–ï–ì–û –æ—Ç—á—ë—Ç–∞ –≤ –æ–¥–Ω–æ–º –ø–∏—Å—å–º–µ
 # TODO —Å–¥–µ–ª–∞—Ç—å –º–µ—Ç–æ–¥ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
  # –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ç–ª–∏—á–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –¥–µ–Ω—å –≤–ø–µ—Ä—ë–¥
  # (—Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∏ —Å–¥–µ–ª–∞–Ω–Ω–æ–≥–æ –≤—á–µ—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
from time import sleep
from getpass import getpass
from psycopg2 import OperationalError
from datetime import datetime, timedelta
from RasAsiVer2.Google.GoogleGmail import GoogleGmail
from RasAsiVer2.Time_Packeg.TodayTasks import TodayTasks
from RasAsiVer2.Decorators.Decorators import time_decorator
from RasAsiVer2.Database.RasAsiDatabase import RasAsiDatabase
from RasAsiVer2.Time_Packeg.TodayTasks_v2 import TodayTasksV2
from RasAsiVer2.Time_Packeg.TransportCard import TransportCard
from RasAsiVer2.Decorators.Decorators import logging_decorator
from RasAsiVer2.Weather_Packeg.WeatherToday import WeatherToday
from RasAsiVer2.Google.GoogleSpreadsheets import GoogleSpreadsheet
from RasAsiVer2.addiction_support.psutil_temperature import TemperatureSensor


class TimeManagement:
    temp = TemperatureSensor()
    RAD = RasAsiDatabase()

    upass = getpass()
    _test_connection_ok = 0
    while not _test_connection_ok:
        try:
            _test_connection_ok = RAD.test_connection(upass=upass)
            print('password is correct üòÅüëç')
        except OperationalError:
            print('incorrect password ü§Ø, try again üòì')
            upass = getpass()

    Task = TodayTasks()
    Task_v2 = TodayTasksV2(upass=upass)  # TODO –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ RAD?

    def __init__(self):
        self.messages = {}
        self.startTimeRasAsi = datetime.now()
        self.cache_variables = {
            'tasks_taken': None,    # switch
            'today_id': None,       # switch
            'weather': None,        # switch
            '00:00': None,          # switch
            '01:00': None,          # switch
            '03:00': None,          # switch
            '23:50': None,          # switch

        }

    @logging_decorator
    def time_line(self):
        while True:
            cTime = datetime.now()
            self.messages = self._view_messages()
            if self.messages:
                for message in self.messages:
                    if message['from_person'] == 'zabavniy7@gmail.com': # TODO –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ 26 —Å—Ç—Ä–æ–∫–µ. –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª RasAsi –¥–ª—è RasAsi - out of range

                        if message['topic'] == '–í—Ä–µ–º—è':
                            self._server_time()
                        elif message['topic'] == '–•—Ä–∞–Ω–∏–ª–∏—â–µ':
                            self._Task_put(material=message['content'])
                        elif message['topic'] == '–î–∞–π –º–Ω–µ –æ–¥–∏–Ω':
                            if len(message['content'].strip()):
                                print(message['content'])
                                self.Task_v2.refresh_v2()
                                self.Task_v2.get_specific_one_v2(int(message['content']))
                            else:
                                self.Task_v2.refresh_v2()
                                self.Task_v2.get_3_tasks(n=1)
                        elif message['topic'] == '–õ–µ–Ω—Ç–∞':
                            self._lenta_discount(number=message['content'])
                        elif message['topic'] == '–ü—Ä–æ–µ–∑–¥–Ω–æ–π':
                            TransportCard(who='me').transport_card()
                        elif message['topic'] == '–ü–æ–≥–æ–¥–∞':
                            WeatherToday(upass=self.upass).weather_today()
                        elif message['topic'] == '–ü—Ä–æ–≥–Ω–æ–∑':
                            RasAsiDatabase().daily_forecast(upass=self.upass)
                        else:
                            self._unsupported_command(message['topic'], message['content'])

            if cTime.hour == 0 and cTime.minute in [0, 1, 2]:
                self.cache_variables['00:00'] = 0       # nullification (new day)
                self.cache_variables['01:00'] = 0       # nullification (new day)
                self.cache_variables['03:00'] = 0       # nullification (new day)
                self.cache_variables['23:50'] = 0       # nullification (new day)
                self.cache_variables['weather'] = 0     # nullification (new day)
                self.cache_variables['today_id'] = 0    # nullification (new day)

            elif cTime.hour == 0:
                if cTime.minute in [8, 9, 37] and not self.cache_variables['00:00']:
                    self.cache_variables['00:00'] = 1
                    # self.RAD.dump_rasasi_database(upass=self.upass)  # TODO –†–∞–∑–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
                    self.RAD.task_completed_today(upass=self.upass)
            elif cTime.hour == 1:
                if cTime.minute in [0, 1, 2] and not self.cache_variables['01:00']:
                    self.cache_variables['01:00'] = 1
                    TransportCard(who='me').transport_card()
            elif cTime.hour == 3:
                if cTime.minute in [0, 1, 2] and not self.cache_variables['03:00']:
                    self.cache_variables['03:00'] = 1
                    WeatherToday(upass=self.upass).weather_today()
                    self.cache_variables['weather'] = 1
            elif cTime.hour == 8:
                if cTime.minute in [0, 1, 2] and not self.cache_variables['tasks_taken']:
                    self.cache_variables['tasks_taken'] = 1
                    # self.Task.take_tasks()
                    self.Task_v2.get_3_tasks()

                    today = datetime.today()
                    day = today.strftime('%j')
                    if int(today.year)%4 == 0:
                        nday = 366 - int(day)
                    else:
                        nday = 365 - int(day)
                    GoogleGmail().send_message(topic=f'–î–µ–Ω—å {day} ‚òÄüîÜ –æ—Å—Ç–∞–ª–æ—Å—å {nday}', message_text='üòó‚ò∫')
                    RasAsiDatabase().daily_forecast(upass=self.upass)
                elif cTime.minute in [5, 6, 7] and not self.cache_variables['weather']:
                    GoogleGmail().send_message(topic='‚òÅüå´ –ü–æ–≥–æ–¥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞', message_text='–ù–µ —É–¥–æ–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É')
                    self.cache_variables['weather'] = 1
            elif cTime.hour == 23:
                if cTime.minute in [50, 51, 52] and not self.cache_variables['23:50']:
                    self.cache_variables['23:50'] = 1
                    self._server_time()
                    self._Task_check_clean_refresh()
                    # self.Task_v2.clear_v2()
                    self.cache_variables['tasks_taken'] = 0

            self.temp.temperature_sensor()
            sleep(60)

    def _view_messages(self):
        messages = GoogleGmail().logic_get_message()
        return messages

    @time_decorator
    def _server_time(self):
        cTime = datetime.now() - self.startTimeRasAsi
        cTime = cTime - timedelta(microseconds=cTime.microseconds)
        GoogleGmail().send_message(
            topic='Server time ‚òÅ', message_text=f'üéâüëå –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞:\t {cTime}')

    def _Task_put(self, material):
        self.Task.put(material=material.strip())  # TODO –î—É–±–ª–∏—Ä—É—é—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞ v2 –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω
        self.Task_v2.put_v2(content=material.strip())

    def _Task_check_clean_refresh(self):
        # self.Task.check()
        # self.Task.day_completed()
        # self.Task.clean()
        # self.Task.refresh_tasks()
        self.Task_v2.refresh_v2()
        self.Task_v2.clear_v2()

    def _lenta_discount(self, number):
        date = datetime.now().strftime('%d.%m.%Y')
        GoogleSpreadsheet().append_spreadsheets_values(values=[[date, int(number)]],
                                                       spreadsheet_id='1SEOxlcQcaVQAhvzAalPUlgpiRWrG0-ji3M8RrZbMnTE',
                                                       range_name='–õ–∏—Å—Ç1')
        RasAsiDatabase().lenta_discount(upass=self.upass, discount=int(number))

    def _unsupported_command(self, command, content=None):
        GoogleGmail().send_message(topic='ü§¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§Ø',
                                 message_text=f'–ö–æ–º–∞–Ω–¥–∞ "{command}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è,'
                                 f'—Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                                 f'1. –í—Ä–µ–º—è\n2. –•—Ä–∞–Ω–∏–ª–∏—â–µ\n3. –î–∞–π –º–Ω–µ –æ–¥–∏–Ω\n4. –õ–µ–Ω—Ç–∞\n'
                                 f'5. –ü—Ä–æ–µ–∑–¥–Ω–æ–π\n'
                                 f'–°–æ–æ–±—â–µ–Ω–∏–µ: {content}')


if __name__ == '__main__':
    TimeManagement().time_line()
else:
    print(f'–ü–æ–¥–∫–ª—é—á–µ–Ω –º–æ–¥—É–ª—å {__name__}')
